# MyApp.py
# D. Thiebaut
from typing import List, Any

from PyQt5.QtWidgets import QFileDialog

from cell_selector import MplFrameSelector
from sharedvariables import image_file_extensions, video_file_extensions

from cell_selector_ui import Ui_MainWindow
from cell_selector_model import CellSelectorModel
# MyApp.py
# D. Thiebaut
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from matplotlib import pyplot as plt
from os.path import basename


class MainWindowUIClass(Ui_MainWindow):
    btns: List[QtWidgets.QPushButton]
    model: CellSelectorModel
    frame_selector: MplFrameSelector

    def __init__(self):
        '''Initialize the super class
        '''
        super().__init__()
        self.model = CellSelectorModel()
        self.frame_selector = None
        self.btns = []

    def setupUi(self, MW):
        ''' Setup the UI of the super class, and add here code
        that relates to the way we want our UI to operate.
        '''
        super().setupUi(MW)
        self.cell_positions_csv_target_lbl.setText('')
        self.mask_video_file_target_lbl.setText('')
        self.vessel_mask_loaded_target_lbl.setText('')
        self.debugDisplay.append('Please select avi')

        self.btns.append(self.next_marked_frame_btn)
        self.btns.append(self.prev_marked_frame_btn)
        self.btns.append(self.next_frame_btn)
        self.btns.append(self.prev_frame_btn)
        self.btns.append(self.load_cell_positions_csv_btn)
        self.btns.append(self.load_mask_video_btn)
        self.btns.append(self.load_vessel_mask_btn)

        for btn in self.btns:
            btn.setDisabled(True)

    def newVideoSlot(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.ExistingFile)
        file_extensions = 'Videos ('
        for extension in video_file_extensions:
            file_extensions += f'*{extension} '
        file_extensions += ')'
        dialog.setNameFilter(file_extensions)
        dialog.setViewMode(QFileDialog.Detail)
        if dialog.exec_():
            file_names = dialog.selectedFiles()
        try:
            self.model.create_video_session(file_names[0])
            self.frame_selector = MplFrameSelector.fromvideosession(self.model.video_session)
            self.frame_selector.activate()
            self.cur_frame_txt.setText(str(self.frame_selector.frame_idx))
            plt.show()
            for btn in self.btns:
                btn.setEnabled(True)

            self.file_loaded_target_lbl.setText(basename(self.model.video_session.video_oa790_file))
            self.vessel_mask_loaded_target_lbl.setText(basename(self.model.video_session.video_850_file))
            self.cell_positions_csv_target_lbl.setText(basename(self.model.video_session.cell_position_csv_files[0]))
            self.mask_video_file_target_lbl.setText(basename(self.model.video_session.mask_video_oa790_file))
        except FileNotFoundError:
            print('No such file or file is not readable. Please select other video.')
        print(f'Selected files {file_names}')

    def loadVesselMaskSlot(self):
        raise NotImplementedError

    def loadCellPositionsCsvSlot(self):
        print('Loading cell position csv')
        pass

    def loadMaskVidSlot(self):
        print('Loading mask video')
        pass

    def goToNextFrameSlot(self):
        # type self.fra
        self.frame_selector.frame_idx += 1
        self.cur_frame_txt.setText(str(self.frame_selector.frame_idx))
        print('Next frame')
        pass

    def goToPrevFrameSlot(self):
        self.frame_selector.frame_idx -= 1
        self.cur_frame_txt.setText(str(self.frame_selector.frame_idx))
        print('Prev frame')
        pass

    def goToNextMarkedFrameSlot(self):
        self.frame_selector.next_marked_frame()
        self.cur_frame_txt.setText(str(self.frame_selector.frame_idx))
        print('Going to next marked frame slot')
        pass

    def goToPrevMarkedFrameSlot(self):
        self.frame_selector.prev_marked_frame()
        self.cur_frame_txt.setText(str(self.frame_selector.frame_idx))
        print('Going to prev marked frame slot')
        pass

    def saveSlot(self):
        print('Saving File')
        pass

    def saveAsSlot(self):
        print('Saving file as')
        pass

def main():
    """
    This is the MAIN ENTRY POINT of our application.  The code at the end
    of the mainwindow.py script will not be executed, since this script is now
    our main program.   We have simply copied the code from mainwindow.py here
    since it was automatically generated by '''pyuic5'''.

    """
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = MainWindowUIClass()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
